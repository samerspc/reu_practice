import torch
import torchvision.transforms as transforms
from torchvision.models import resnet18
from PIL import Image
import json
import matplotlib.pyplot as plt

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
device = torch.device("mps" if torch.backends.mps.is_available()
                      else "cuda" if torch.cuda.is_available()
                      else "cpu")
print("‚úÖ Using device:", device)

model_path = "food101_small_model.pt"
idx_to_class_path = "idx_to_class_small.json"
image_path = "/content/dataset/images/baklava/1021344.jpg"  # –ü–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π —Ñ–∞–π–ª

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ===
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor()
])

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∫–ª–∞—Å—Å–æ–≤ ===
with open(idx_to_class_path, "r") as f:
    idx_to_class = json.load(f)

num_classes = len(idx_to_class)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
model = resnet18(pretrained=False)
model.fc = torch.nn.Linear(model.fc.in_features, num_classes)
model.load_state_dict(torch.load(model_path, map_location=device))
model.to(device)
model.eval()

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ===
def predict_image(image_path):
    image = Image.open(image_path).convert("RGB")
    img_tensor = transform(image).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(img_tensor)
        _, pred_index = outputs.max(1)
        predicted_class = idx_to_class[str(pred_index.item())]

    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    plt.imshow(image)
    plt.axis("off")
    plt.title(f"üçΩ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {predicted_class}")
    plt.show()

# === –ó–∞–ø—É—Å–∫
predict_image(image_path)